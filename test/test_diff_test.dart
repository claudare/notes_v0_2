// generated by Claude 3.5 Sonnet

import 'package:notes_v0_2/app_model_text_diff.dart';
import 'package:test/test.dart';

void main() {
  test('TextDiff operations can be created and pattern matched', () {
    final diff = TextDiff(
      ops: [
        TextDiffOpInsert(line: 0, content: 'Hello'),
        TextDiffOpDelete(line: 1, count: 2),
        TextDiffOpInsert(line: 3, content: 'World'),
      ],
    );

    // Test serialization
    final maps = diff.ops.map((op) => op.toMap()).toList();
    final deserializedOps = maps.map(TextDiffOp.fromMap).toList();

    expect(deserializedOps.length, equals(3));

    // Test pattern matching
    for (final op in diff.ops) {
      final description = op.map(
        paste: (op) => 'Pasting "${op.content}" at line ${op.line}',
        delete: (op) => 'Deleting ${op.count} lines from line ${op.line}',
      );
      final _ = description;
      // print(description);
    }

    // Test applying operations (example)
    final List<String> document = ['Initial line'];

    for (final op in diff.ops) {
      op.map(
        paste: (op) {
          // Insert at specific line
          if (op.line >= document.length) {
            document.add(op.content);
          } else {
            document.insert(op.line, op.content);
          }
        },
        delete: (op) {
          // Remove specified number of lines
          if (op.line < document.length) {
            final endIndex = (op.line + op.count).clamp(0, document.length);
            document.removeRange(op.line, endIndex);
          }
        },
      );
    }

    // Verify the final document state
    expect(document, equals(['Hello', 'World']));
  });

  test('TextDiffOp can be serialized and deserialized', () {
    final ops = [
      TextDiffOpInsert(line: 0, content: 'Hello'),
      TextDiffOpDelete(line: 1, count: 2),
    ];

    for (final op in ops) {
      final map = op.toMap();
      final deserialized = TextDiffOp.fromMap(map);

      deserialized.map(
        paste: (paste) {
          expect(paste.line, equals((op as TextDiffOpInsert).line));
          expect(paste.content, equals(op.content));
        },
        delete: (delete) {
          expect(delete.line, equals((op as TextDiffOpDelete).line));
          expect(delete.count, equals(op.count));
        },
      );
    }
  });
}
